package eu.monnetproject.clesa.core.tokenizer.latin;

/* Generated By:JavaCC: Do not edit this line. LatinTokenizerCCTokenManager.java */

/** Token Manager. */
public class LatinTokenizerCCTokenManager implements LatinTokenizerCCConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjMoveStringLiteralDfa0_0()
{
   return jjMoveNfa_0(0, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0x88c0088200000000L, 0x0L
};
static final long[] jjbitVec1 = {
   0x0L, 0x4000000000000000L, 0x80L, 0x0L
};
static final long[] jjbitVec2 = {
   0x0L, 0xfc000000L, 0x4000000000000600L, 0x18000000000049L
};
static final long[] jjbitVec3 = {
   0xc8003600L, 0x3c0000000000L, 0x0L, 0x100000L
};
static final long[] jjbitVec4 = {
   0x3fffL, 0x0L, 0x0L, 0x380000000000000L
};
static final long[] jjbitVec5 = {
   0x7fff000000000000L, 0x40000000L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0x0L, 0x1003000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0x0L, 0x1000000000000L
};
static final long[] jjbitVec8 = {
   0x0L, 0x0L, 0x0L, 0x10000000000000L
};
static final long[] jjbitVec9 = {
   0x0L, 0xc008000L, 0x0L, 0x0L
};
static final long[] jjbitVec10 = {
   0x3c0000000017fff0L, 0x0L, 0x20L, 0x61f0000L
};
static final long[] jjbitVec11 = {
   0x0L, 0xfc00L, 0x0L, 0x800000000000000L
};
static final long[] jjbitVec12 = {
   0x0L, 0x1ff00000000L, 0x0L, 0x0L
};
static final long[] jjbitVec13 = {
   0x1L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec14 = {
   0x0L, 0x600000000000L, 0x18000000L, 0x380000000000L
};
static final long[] jjbitVec15 = {
   0x60000000000000L, 0x0L, 0x0L, 0x7700000L
};
static final long[] jjbitVec16 = {
   0x7ffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec17 = {
   0x0L, 0x30L, 0x0L, 0x0L
};
static final long[] jjbitVec18 = {
   0xc0000000L, 0x0L, 0x3f7f00000000L, 0x0L
};
static final long[] jjbitVec19 = {
   0x0L, 0x1fc000000L, 0x0L, 0xf000000000000000L
};
static final long[] jjbitVec20 = {
   0xf800000000000000L, 0xc000000000000000L, 0x0L, 0x800ffL
};
static final long[] jjbitVec21 = {
   0x7fff00ffffff0000L, 0x600000007febffeeL, 0x6000L, 0x0L
};
static final long[] jjbitVec22 = {
   0x60000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec23 = {
   0x0L, 0x3fff0000000000L, 0x0L, 0xffc000000060L
};
static final long[] jjbitVec24 = {
   0x0L, 0x0L, 0x1fffff8L, 0x300000000f000000L
};
static final long[] jjbitVec25 = {
   0x0L, 0x0L, 0x0L, 0xde00000000000000L
};
static final long[] jjbitVec26 = {
   0x0L, 0x1000000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec27 = {
   0xfff7fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec28 = {
   0x20010000fff3ff0eL, 0x0L, 0x100000000L, 0x800000000000000L
};
static final long[] jjbitVec29 = {
   0x0L, 0x0L, 0x0L, 0xc000000000000000L
};
static final long[] jjbitVec30 = {
   0xe000L, 0x4008000000000000L, 0x0L, 0xfc000000000000L
};
static final long[] jjbitVec31 = {
   0x0L, 0xf0000000000000L, 0x0L, 0x70000000000c000L
};
static final long[] jjbitVec32 = {
   0xc00000000000L, 0x80000000L, 0x0L, 0xc0003ffeL
};
static final long[] jjbitVec33 = {
   0x0L, 0xf0000000L, 0x0L, 0x30000c0000000L
};
static final long[] jjbitVec34 = {
   0x0L, 0x0L, 0x0L, 0x80000000000L
};
static final long[] jjbitVec35 = {
   0xc000000000000000L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec36 = {
   0xffe7000003ff0000L, 0xd0bfff71fffL, 0x0L, 0x0L
};
static final long[] jjbitVec37 = {
   0x380000018c00f7eeL, 0x3fa8000000L, 0x0L, 0x0L
};
static final long[] jjbitVec38 = {
   0x0L, 0x0L, 0x0L, 0x400000004000000L
};
static final long[] jjbitVec39 = {
   0x0L, 0x0L, 0x0L, 0x1000000010L
};
static final long[] jjbitVec40 = {
   0x0L, 0x0L, 0x0L, 0x200000002L
};
static final long[] jjbitVec41 = {
   0x1ff0000000000000L, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec43 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec44 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec45 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec46 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec47 = {
   0x1600L, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec48 = {
   0x0L, 0xffc000000000L, 0x0L, 0xffc000000000L
};
static final long[] jjbitVec49 = {
   0x0L, 0x3ff00000000L, 0x0L, 0x3ff000000000000L
};
static final long[] jjbitVec50 = {
   0x0L, 0xffc000000000L, 0x0L, 0xff8000000000L
};
static final long[] jjbitVec51 = {
   0x0L, 0xffc000000000L, 0x0L, 0x0L
};
static final long[] jjbitVec52 = {
   0x0L, 0x3ff0000L, 0x0L, 0x3ff0000L
};
static final long[] jjbitVec53 = {
   0x0L, 0x3ffL, 0x0L, 0x0L
};
static final long[] jjbitVec54 = {
   0xfffffffeL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec55 = {
   0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
};
static final long[] jjbitVec56 = {
   0x3fffffffffL, 0x0L, 0x0L, 0x0L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 316;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x8c00fffe00000000L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  else if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(0, 21);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 31);
                  break;
               case 2:
                  if (curChar != 46)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjAddStates(32, 55);
                  break;
               case 141:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 31);
                  break;
               case 226:
               case 270:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(226, 227);
                  break;
               case 227:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(228);
                  break;
               case 228:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(228);
                  break;
               case 229:
               case 279:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(229, 230);
                  break;
               case 230:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(231);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 232:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 234:
               case 235:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(230, 235);
                  break;
               case 236:
               case 292:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(236, 237);
                  break;
               case 237:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(238);
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(238, 239);
                  break;
               case 239:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 241:
               case 242:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(242, 243);
                  break;
               case 243:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(244);
                  break;
               case 244:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(239, 244);
                  break;
               case 245:
               case 294:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 246:
                  if (curChar == 37 && kind > 7)
                     kind = 7;
                  break;
               case 247:
               case 296:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(247, 248);
                  break;
               case 248:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 249:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 250:
               case 251:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(251, 246);
                  break;
               case 252:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 21);
                  break;
               case 253:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(253);
                  break;
               case 254:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 255:
                  if ((0x600000000000L & l) != 0L)
                     jjCheckNAdd(256);
                  break;
               case 256:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 258:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(258, 259);
                  break;
               case 259:
                  if ((0x600000000000L & l) != 0L)
                     jjCheckNAdd(260);
                  break;
               case 260:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(259, 260);
                  break;
               case 261:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(261, 262);
                  break;
               case 262:
                  if (curChar == 46)
                     jjCheckNAdd(263);
                  break;
               case 263:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(262, 263);
                  break;
               case 264:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(264, 265);
                  break;
               case 265:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 266:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 267:
               case 268:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(268);
                  break;
               case 269:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(269, 270);
                  break;
               case 271:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(271, 272);
                  break;
               case 272:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 273:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 274:
               case 275:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(275, 276);
                  break;
               case 276:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(277);
                  break;
               case 277:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(272, 277);
                  break;
               case 278:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(278, 279);
                  break;
               case 280:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(280, 281);
                  break;
               case 281:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 282:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 283:
               case 284:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(284, 285);
                  break;
               case 285:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAdd(286);
                  break;
               case 286:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(286, 287);
                  break;
               case 287:
                  if ((0x8c00fffe00000000L & l) != 0L)
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 288:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 289:
               case 290:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(285, 290);
                  break;
               case 291:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(291, 292);
                  break;
               case 293:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(293, 294);
                  break;
               case 295:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 299:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 300;
                  break;
               case 302:
                  if (curChar == 46)
                     jjCheckNAdd(303);
                  break;
               case 304:
                  if (curChar != 46)
                     break;
                  if (kind > 3)
                     kind = 3;
                  jjCheckNAdd(303);
                  break;
               case 306:
                  if (curChar == 38)
                     jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 309:
                  if (curChar == 45)
                     jjCheckNAdd(310);
                  break;
               case 311:
                  if (curChar != 46)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(310);
                  break;
               case 312:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 309;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(62, 67);
                  else if ((0x28000000b8000001L & l) != 0L)
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(0, 21);
                  }
                  if ((0x204600002046L & l) != 0L)
                     jjCheckNAdd(2);
                  else if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(68, 76);
                  else if ((0x400000004000000L & l) != 0L)
                     jjAddStates(77, 78);
                  else if ((0x10000000100L & l) != 0L)
                     jjCheckNAddStates(79, 82);
                  else if ((0x200000002000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 215);
                  else if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(83, 86);
                  else if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(87, 102);
                  else if ((0x80000000800000L & l) != 0L)
                     jjCheckNAddStates(103, 105);
                  else if ((0x40000000400000L & l) != 0L)
                     jjCheckNAddStates(106, 114);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(115, 118);
                  else if ((0x8000000080000L & l) != 0L)
                     jjCheckNAddStates(119, 133);
                  else if ((0x4000000040000L & l) != 0L)
                     jjAddStates(134, 135);
                  else if ((0x1000000010000L & l) != 0L)
                     jjAddStates(136, 140);
                  else if ((0x800000008000L & l) != 0L)
                     jjAddStates(141, 142);
                  else if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(143, 147);
                  else if ((0x100000001000L & l) != 0L)
                     jjCheckNAddStates(148, 152);
                  else if ((0x40000000400L & l) != 0L)
                     jjAddStates(153, 160);
                  else if ((0x20000000200L & l) != 0L)
                     jjAddStates(161, 163);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(164, 171);
                  else if ((0x800000008L & l) != 0L)
                     jjCheckNAddStates(172, 179);
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddStates(180, 190);
                  else if ((0x4000000040L & l) != 0L)
                     jjAddStates(191, 194);
                  else if ((0x400000004L & l) != 0L)
                     jjAddStates(195, 201);
                  else if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(202, 220);
                  break;
               case 1:
                  if ((0x204600002046L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAddStates(202, 220);
                  break;
               case 4:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 6:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 7:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 8:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 9:
               case 107:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 10:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 11:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 12:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 13:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(12);
                  break;
               case 14:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 16:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 20:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 21:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 22:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 23:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 24:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 25:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 26:
               case 217:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 27:
                  if ((0x80000000800L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 28:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 30:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 31:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 32:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 33:
               case 47:
               case 168:
               case 176:
               case 221:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 34:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
               case 60:
               case 63:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 37:
               case 122:
               case 196:
               case 204:
               case 206:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 38:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 39:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 40:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 41:
                  if ((0x400000004L & l) != 0L)
                     jjAddStates(195, 201);
                  break;
               case 42:
               case 77:
               case 80:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 43:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 45:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 46:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 48:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if ((0x400000004000000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 50:
                  if ((0x40000000400L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x40000000400L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 53:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAddStates(172, 179);
                  break;
               case 55:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 56:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 57:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 59:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 61:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 62:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 64:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(221, 228);
                  break;
               case 67:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 68:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 69:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 70:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 71:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 72:
               case 157:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 73:
                  if ((0x400000004000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 74:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 75:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(191, 194);
                  break;
               case 76:
               case 90:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 78:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 79:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(164, 171);
                  break;
               case 82:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 83:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 85:
               case 154:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 86:
               case 128:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(19);
                  break;
               case 87:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 88:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 89:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 88;
                  break;
               case 91:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 92:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 93:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x20000000200L & l) != 0L)
                     jjAddStates(161, 163);
                  break;
               case 95:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 96:
               case 190:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(4);
                  break;
               case 97:
               case 194:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(8);
                  break;
               case 98:
                  if ((0x40000000400L & l) != 0L)
                     jjAddStates(153, 160);
                  break;
               case 99:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 100:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 101:
               case 153:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 102:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 103:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 104:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 105:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 106:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 108:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 109:
               case 171:
               case 188:
               case 212:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 110:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 111:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAddStates(148, 152);
                  break;
               case 112:
               case 113:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 114:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 115:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAddStates(180, 190);
                  break;
               case 116:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 117:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 118:
                  if ((0x40000000400L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 119:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 120:
               case 215:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 121:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 123:
               case 125:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 124:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 126:
                  if ((0x80000000800000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAddStates(143, 147);
                  break;
               case 130:
                  if ((0x200000002000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 132:
                  if ((0x800000008000L & l) != 0L)
                     jjAddStates(141, 142);
                  break;
               case 133:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 134:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 135:
                  if ((0x1000000010000L & l) != 0L)
                     jjAddStates(136, 140);
                  break;
               case 136:
                  if ((0x100000001000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 137:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(25);
                  break;
               case 138:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 140:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(118);
                  break;
               case 142:
                  if ((0x4000000040L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 143:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(134, 135);
                  break;
               case 146:
               case 151:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 147:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(55);
                  break;
               case 148:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAddStates(119, 133);
                  break;
               case 150:
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 152:
                  if ((0x20000000200L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 155:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 156:
                  if ((0x1000000010000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 158:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 159:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 158;
                  break;
               case 160:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 161:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(115, 118);
                  break;
               case 162:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 163:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(162);
                  break;
               case 164:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(5);
                  break;
               case 165:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 167:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 170:
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAddStates(106, 114);
                  break;
               case 172:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 173:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 172;
                  break;
               case 174:
                  if ((0x4000000040000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 175:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 177:
               case 184:
                  if ((0x800000008L & l) != 0L)
                     jjCheckNAdd(39);
                  break;
               case 178:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 182:
                  if ((0x80000000800000L & l) != 0L)
                     jjCheckNAddStates(103, 105);
                  break;
               case 183:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 185:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(87, 102);
                  break;
               case 189:
               case 193:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(67);
                  break;
               case 191:
                  if ((0x2000000020000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 192:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 191;
                  break;
               case 195:
                  if ((0x10000000100L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 194;
                  break;
               case 197:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 198:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 200:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 200;
                  break;
               case 202:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 201;
                  break;
               case 203:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 202;
                  break;
               case 205:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 204;
                  break;
               case 207:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 208:
                  if ((0x400000004000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 209:
                  if ((0x40000000400000L & l) != 0L)
                     jjCheckNAdd(31);
                  break;
               case 210:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAddStates(83, 86);
                  break;
               case 211:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(162);
                  break;
               case 213:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(44);
                  break;
               case 214:
                  if ((0x200000002000000L & l) != 0L)
                     jjCheckNAddTwoStates(5, 215);
                  break;
               case 216:
                  if ((0x10000000100L & l) != 0L)
                     jjCheckNAddStates(79, 82);
                  break;
               case 218:
                  if ((0x10000000100000L & l) != 0L)
                     jjCheckNAdd(29);
                  break;
               case 219:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 220:
                  if ((0x400000004000000L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 222:
                  if ((0x400000004000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 223:
                  if ((0x8000000080L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 226:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(229, 230);
                  break;
               case 227:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(228);
                  break;
               case 228:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(228);
                  break;
               case 229:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(229, 230);
                  break;
               case 230:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(231);
                  break;
               case 231:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 232:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 233:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 235:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(230, 235);
                  break;
               case 236:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(231, 232);
                  break;
               case 237:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(238);
                  break;
               case 238:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(238, 239);
                  break;
               case 239:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 240:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 242:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(233, 234);
                  break;
               case 243:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(244);
                  break;
               case 244:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(239, 244);
                  break;
               case 245:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 247:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(235, 236);
                  break;
               case 248:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 249:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 251:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(251, 246);
                  break;
               case 252:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 21);
                  break;
               case 253:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(253);
                  break;
               case 254:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(56, 58);
                  break;
               case 255:
                  if (curChar == 95)
                     jjCheckNAdd(256);
                  break;
               case 256:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(59, 61);
                  break;
               case 257:
                  if (curChar == 64)
                     jjCheckNAdd(258);
                  break;
               case 258:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(258, 259);
                  break;
               case 260:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(259, 260);
                  break;
               case 261:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(261, 262);
                  break;
               case 263:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(262, 263);
                  break;
               case 264:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(264, 265);
                  break;
               case 265:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 266:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 268:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 268;
                  break;
               case 269:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(269, 270);
                  break;
               case 271:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(271, 272);
                  break;
               case 272:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 273:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 275:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(237, 238);
                  break;
               case 276:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(277);
                  break;
               case 277:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(272, 277);
                  break;
               case 278:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(278, 279);
                  break;
               case 280:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(280, 281);
                  break;
               case 281:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 282:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 284:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(284, 285);
                  break;
               case 285:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAdd(286);
                  break;
               case 286:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(286, 287);
                  break;
               case 287:
                  if ((0x28000000b8000001L & l) != 0L)
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 288:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 290:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(285, 290);
                  break;
               case 291:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(291, 292);
                  break;
               case 293:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(293, 294);
                  break;
               case 295:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 297:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddStates(62, 67);
                  break;
               case 298:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(298, 299);
                  break;
               case 300:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(299, 300);
                  break;
               case 301:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 303:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(239, 240);
                  break;
               case 305:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(305, 306);
                  break;
               case 306:
                  if (curChar == 64)
                     jjCheckNAdd(307);
                  break;
               case 307:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjCheckNAdd(307);
                  break;
               case 308:
                  if ((0x1000000010L & l) != 0L)
                     jjCheckNAddStates(68, 76);
                  break;
               case 310:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(241, 242);
                  break;
               case 313:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 312;
                  break;
               case 314:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 313;
                  break;
               case 315:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 314;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 8)
                        kind = 8;
                  }
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 31);
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAddStates(0, 21);
                  }
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 67);
                  break;
               case 129:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 131:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 139:
                  if (jjCanMove_3(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 169:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 224:
                  if (jjCanMove_4(hiByte, i1, i2, l1, l2) && kind > 15)
                     kind = 15;
                  break;
               case 225:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(22, 31);
                  break;
               case 226:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(226, 227);
                  break;
               case 227:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(228);
                  break;
               case 228:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(228);
                  break;
               case 229:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(229, 230);
                  break;
               case 230:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(231);
                  break;
               case 231:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(231, 232);
                  break;
               case 232:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 233:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(233, 234);
                  break;
               case 234:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(230, 235);
                  break;
               case 235:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(230, 235);
                  break;
               case 236:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(236, 237);
                  break;
               case 237:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(238);
                  break;
               case 238:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(238, 239);
                  break;
               case 239:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 240:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(240, 241);
                  break;
               case 241:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(242, 243);
                  break;
               case 242:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(242, 243);
                  break;
               case 243:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(244);
                  break;
               case 244:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(239, 244);
                  break;
               case 245:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 247:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(247, 248);
                  break;
               case 248:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 249:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(249, 250);
                  break;
               case 250:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(251, 246);
                  break;
               case 251:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(251, 246);
                  break;
               case 252:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAddStates(0, 21);
                  break;
               case 253:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(253);
                  break;
               case 254:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(56, 58);
                  break;
               case 256:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(59, 61);
                  break;
               case 258:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(258, 259);
                  break;
               case 260:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 5)
                     kind = 5;
                  jjCheckNAddTwoStates(259, 260);
                  break;
               case 261:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(261, 262);
                  break;
               case 263:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 6)
                     kind = 6;
                  jjCheckNAddTwoStates(262, 263);
                  break;
               case 264:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(264, 265);
                  break;
               case 265:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 266:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(266, 267);
                  break;
               case 267:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(268);
                  break;
               case 268:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(268);
                  break;
               case 269:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(269, 270);
                  break;
               case 270:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(226, 227);
                  break;
               case 271:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(271, 272);
                  break;
               case 272:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 273:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(273, 274);
                  break;
               case 274:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(275, 276);
                  break;
               case 275:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(275, 276);
                  break;
               case 276:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(277);
                  break;
               case 277:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(272, 277);
                  break;
               case 278:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(278, 279);
                  break;
               case 279:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(229, 230);
                  break;
               case 280:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(280, 281);
                  break;
               case 281:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 282:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(282, 283);
                  break;
               case 283:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(284, 285);
                  break;
               case 284:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(284, 285);
                  break;
               case 285:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAdd(286);
                  break;
               case 286:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(286, 287);
                  break;
               case 287:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 288:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(288, 289);
                  break;
               case 289:
                  if (!jjCanMove_5(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(285, 290);
                  break;
               case 290:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(285, 290);
                  break;
               case 291:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(291, 292);
                  break;
               case 292:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(236, 237);
                  break;
               case 293:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(293, 294);
                  break;
               case 294:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(245, 246);
                  break;
               case 295:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(295, 296);
                  break;
               case 296:
                  if (jjCanMove_5(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(247, 248);
                  break;
               case 297:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddStates(62, 67);
                  break;
               case 298:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(298, 299);
                  break;
               case 300:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 2)
                     kind = 2;
                  jjCheckNAddTwoStates(299, 300);
                  break;
               case 301:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(301, 302);
                  break;
               case 303:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjAddStates(239, 240);
                  break;
               case 305:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(305, 306);
                  break;
               case 307:
                  if (!jjCanMove_6(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 307;
                  break;
               case 310:
                  if (jjCanMove_6(hiByte, i1, i2, l1, l2))
                     jjAddStates(241, 242);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 316 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   253, 254, 255, 257, 261, 262, 264, 265, 269, 270, 271, 272, 278, 279, 280, 281, 
   291, 292, 293, 294, 295, 296, 226, 227, 229, 230, 236, 237, 245, 246, 247, 248, 
   1, 3, 41, 54, 66, 75, 81, 94, 98, 111, 115, 127, 132, 135, 145, 149, 
   161, 170, 182, 187, 210, 214, 216, 220, 254, 255, 257, 255, 256, 257, 298, 299, 
   301, 302, 305, 306, 68, 5, 5, 70, 20, 71, 72, 74, 315, 222, 223, 217, 
   219, 5, 5, 211, 10, 212, 213, 10, 188, 4, 31, 189, 190, 10, 192, 193, 
   195, 198, 203, 205, 207, 208, 209, 183, 186, 29, 55, 29, 10, 171, 173, 175, 
   176, 180, 181, 163, 165, 167, 169, 20, 150, 151, 152, 5, 153, 154, 155, 156, 
   31, 67, 5, 157, 159, 160, 146, 148, 136, 138, 139, 141, 144, 133, 134, 20, 
   128, 19, 129, 131, 112, 31, 113, 11, 114, 99, 100, 101, 103, 104, 106, 108, 
   110, 95, 96, 97, 83, 85, 86, 87, 89, 90, 91, 93, 12, 57, 59, 61, 
   12, 62, 65, 25, 116, 117, 55, 119, 5, 120, 29, 121, 122, 124, 126, 76, 
   77, 79, 80, 43, 45, 46, 48, 49, 51, 53, 4, 6, 7, 9, 10, 11, 
   14, 18, 19, 22, 24, 26, 28, 30, 32, 35, 36, 38, 40, 68, 5, 5, 
   70, 20, 71, 72, 74, 226, 227, 236, 237, 242, 243, 247, 248, 275, 276, 303, 
   304, 310, 311, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      case 3:
         return ((jjbitVec1[i2] & l2) != 0L);
      case 5:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 6:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 7:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 8:
         return ((jjbitVec5[i2] & l2) != 0L);
      case 9:
         return ((jjbitVec6[i2] & l2) != 0L);
      case 10:
         return ((jjbitVec7[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec8[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec9[i2] & l2) != 0L);
      case 15:
         return ((jjbitVec10[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec11[i2] & l2) != 0L);
      case 19:
         return ((jjbitVec12[i2] & l2) != 0L);
      case 20:
         return ((jjbitVec13[i2] & l2) != 0L);
      case 22:
         return ((jjbitVec14[i2] & l2) != 0L);
      case 23:
         return ((jjbitVec15[i2] & l2) != 0L);
      case 24:
         return ((jjbitVec16[i2] & l2) != 0L);
      case 25:
         return ((jjbitVec17[i2] & l2) != 0L);
      case 26:
         return ((jjbitVec18[i2] & l2) != 0L);
      case 27:
         return ((jjbitVec19[i2] & l2) != 0L);
      case 28:
         return ((jjbitVec20[i2] & l2) != 0L);
      case 32:
         return ((jjbitVec21[i2] & l2) != 0L);
      case 35:
         return ((jjbitVec22[i2] & l2) != 0L);
      case 39:
         return ((jjbitVec23[i2] & l2) != 0L);
      case 41:
         return ((jjbitVec24[i2] & l2) != 0L);
      case 44:
         return ((jjbitVec25[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec26[i2] & l2) != 0L);
      case 46:
         return ((jjbitVec27[i2] & l2) != 0L);
      case 48:
         return ((jjbitVec28[i2] & l2) != 0L);
      case 164:
         return ((jjbitVec29[i2] & l2) != 0L);
      case 166:
         return ((jjbitVec30[i2] & l2) != 0L);
      case 168:
         return ((jjbitVec31[i2] & l2) != 0L);
      case 169:
         return ((jjbitVec32[i2] & l2) != 0L);
      case 170:
         return ((jjbitVec33[i2] & l2) != 0L);
      case 171:
         return ((jjbitVec34[i2] & l2) != 0L);
      case 253:
         return ((jjbitVec35[i2] & l2) != 0L);
      case 254:
         return ((jjbitVec36[i2] & l2) != 0L);
      case 255:
         return ((jjbitVec37[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec38[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec39[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_3(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec40[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_4(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec43[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec44[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec45[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec46[i2] & l2) != 0L);
      default :
         if ((jjbitVec41[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_5(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 6:
         return ((jjbitVec49[i2] & l2) != 0L);
      case 11:
         return ((jjbitVec50[i2] & l2) != 0L);
      case 13:
         return ((jjbitVec51[i2] & l2) != 0L);
      case 14:
         return ((jjbitVec52[i2] & l2) != 0L);
      case 16:
         return ((jjbitVec53[i2] & l2) != 0L);
      default :
         if ((jjbitVec47[i1] & l1) != 0L)
            if ((jjbitVec48[i2] & l2) == 0L)
               return false;
            else
            return true;
         return false;
   }
}
private static final boolean jjCanMove_6(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec55[i2] & l2) != 0L);
      case 45:
         return ((jjbitVec56[i2] & l2) != 0L);
      default :
         if ((jjbitVec54[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x87ffL, 
};
static final long[] jjtoSkip = {
   0x40000L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[316];
private final int[] jjstateSet = new int[632];
protected char curChar;
/** Constructor. */
public LatinTokenizerCCTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public LatinTokenizerCCTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 316; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 18)
   {
      jjmatchedKind = 18;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
